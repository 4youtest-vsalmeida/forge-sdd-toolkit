#!/usr/bin/env python3
"""
forge-sdd - Simple CLI to initialize SDD projects

Usage:
    forge-sdd init <project-name>
"""

import sys
import os
import shutil
from pathlib import Path
from datetime import datetime


def print_header():
    print("\nüöÄ forge-sdd-toolkit initializer\n")


def print_success(message):
    print(f"‚úÖ {message}")


def print_error(message):
    print(f"‚ùå {message}", file=sys.stderr)


def print_step(message):
    print(f"‚è≥ {message}...", end="", flush=True)


def print_step_done():
    print(" ‚úÖ")


def get_toolkit_root():
    """Get the root directory of the installed toolkit"""
    # When installed via pip/npm, this script is in bin/
    # The toolkit structure is in the package root
    script_dir = Path(__file__).parent.absolute()
    return script_dir.parent


def transform_paths(content):
    """Transform relative paths from toolkit structure to user project structure"""
    # Base prompts: ../base/ ‚Üí _base/
    content = content.replace("../base/", "_base/")
    content = content.replace("../../prompts/base/", "_base/")
    
    # Templates: ../../templates/ ‚Üí ../.forge-sdd/templates/
    content = content.replace("../../templates/", "../.forge-sdd/templates/")
    content = content.replace("../templates/", "../.forge-sdd/templates/")
    
    # Schemas: ../../schemas/ ‚Üí ../.forge-sdd/schemas/
    content = content.replace("../../schemas/", "../.forge-sdd/schemas/")
    content = content.replace("../schemas/", "../.forge-sdd/schemas/")
    
    # Docs: ../../docs/ ‚Üí ../docs/
    content = content.replace("../../docs/", "../docs/")
    
    return content


def add_generation_header(content, source_path):
    """Add auto-generation header to file"""
    timestamp = datetime.now().isoformat()
    header = f"""<!--
ü§ñ AUTO-GENERATED by forge-sdd-toolkit
üìÑ Source: {source_path}
üìÖ Generated: {timestamp}

‚ö†Ô∏è  DO NOT EDIT THIS FILE MANUALLY
üí° To update: Run `forge-sdd update`

This file is part of the SDD (Specification-Driven Development) lifecycle.
Learn more: https://github.com/4youtest-vsalmeida/forge-sdd-toolkit
-->

"""
    return header + content


def copy_with_transform(src, dest, transform=False, add_header=False, source_path=""):
    """Copy file with optional path transformation and header"""
    dest.parent.mkdir(parents=True, exist_ok=True)
    
    if not transform and not add_header:
        shutil.copy2(src, dest)
        return
    
    with open(src, 'r', encoding='utf-8') as f:
        content = f.read()
    
    if transform:
        content = transform_paths(content)
    
    if add_header:
        content = add_generation_header(content, source_path)
    
    with open(dest, 'w', encoding='utf-8') as f:
        f.write(content)


def copy_directory(src, dest):
    """Recursively copy directory"""
    if dest.exists():
        shutil.rmtree(dest)
    shutil.copytree(src, dest)


def init_project(project_name):
    """Initialize a new SDD project"""
    print_header()
    
    # Validate project name
    if not project_name or not project_name.replace('-', '').replace('_', '').isalnum():
        print_error("Project name must contain only letters, numbers, hyphens, and underscores")
        sys.exit(1)
    
    # Get paths
    toolkit_root = get_toolkit_root()
    project_path = Path.cwd() / project_name
    
    # Check if project already exists
    if project_path.exists():
        print_error(f"Directory '{project_name}' already exists")
        sys.exit(1)
    
    try:
        # Step 1: Create directory structure
        print_step("Creating project structure")
        project_path.mkdir(parents=True)
        (project_path / ".github" / "prompts" / "_base").mkdir(parents=True)
        (project_path / ".forge-sdd" / "templates").mkdir(parents=True)
        (project_path / ".forge-sdd" / "schemas").mkdir(parents=True)
        (project_path / "docs").mkdir(parents=True)
        (project_path / ".vscode").mkdir(parents=True)
        print_step_done()
        
        # Step 2: Copy GitHub Copilot prompts (stage prompts)
        print_step("Setting up GitHub Copilot prompts")
        prompts_source = toolkit_root / "structure" / "prompts" / "commands"
        stage_prompts = [
            "forge-ideate.md",
            "forge-architect.md",
            "forge-plan.md",
            "forge-implement.md",
            "forge-test.md",
            "forge-operate.md"
        ]
        
        for filename in stage_prompts:
            src = prompts_source / filename
            if src.exists():
                dest = project_path / ".github" / "prompts" / filename.replace(".md", ".prompt.md")
                copy_with_transform(
                    src, dest,
                    transform=True,
                    add_header=True,
                    source_path=f"structure/prompts/commands/{filename}"
                )
        
        # Copy base prompts
        base_source = toolkit_root / "structure" / "prompts" / "base"
        base_prompts = ["system-prompt.md", "decision-framework.md"]
        
        for filename in base_prompts:
            src = base_source / filename
            if src.exists():
                dest = project_path / ".github" / "prompts" / "_base" / filename
                copy_with_transform(
                    src, dest,
                    transform=True,
                    add_header=True,
                    source_path=f"structure/prompts/base/{filename}"
                )
        
        print_step_done()
        
        # Step 3: Copy templates
        print_step("Copying SDD templates")
        templates_source = toolkit_root / "structure" / "templates"
        templates_dest = project_path / ".forge-sdd" / "templates"
        if templates_source.exists():
            copy_directory(templates_source, templates_dest)
        print_step_done()
        
        # Step 4: Copy schemas
        print_step("Copying validation schemas")
        schemas_source = toolkit_root / "structure" / "schemas"
        schemas_dest = project_path / ".forge-sdd" / "schemas"
        if schemas_source.exists():
            copy_directory(schemas_source, schemas_dest)
        print_step_done()
        
        # Step 5: Generate project files
        print_step("Generating project files")
        
        # README.md
        readme_content = f"""# {project_name}

> Generated by [forge-sdd-toolkit](https://github.com/4youtest-vsalmeida/forge-sdd-toolkit)

## Quick Start

1. Open this project in VS Code
2. Open GitHub Copilot Chat (Cmd/Ctrl + I)
3. Type: `@forge-ideate`
4. Describe your Forge app idea
5. Follow the 6-stage SDD lifecycle

## The 6-Stage SDD Lifecycle

```
IDEATE ‚Üí ARCHITECT ‚Üí PLAN ‚Üí IMPLEMENT ‚Üí TEST ‚Üí OPERATE
```

### 1. IDEATE ‚Üí Specification
```bash
@forge-ideate
I want to build a Jira app that shows GitHub PR status in issue panels
```
**Output**: `docs/specification-document.md`

### 2. ARCHITECT ‚Üí Architecture Decisions
```bash
@forge-architect
[Copilot reads specification and makes technical decisions]
```
**Output**: `docs/ADD.md`

### 3. PLAN ‚Üí Implementation Plan
```bash
@forge-plan
[Copilot breaks down architecture into tasks]
```
**Output**: `docs/implementation-plan.md`

### 4. IMPLEMENT ‚Üí Working Code
```bash
@forge-implement
[Copilot generates production-ready code]
```
**Output**: Source code, `manifest.yml`, `package.json`

### 5. TEST ‚Üí Test Suite
```bash
@forge-test
[Copilot generates comprehensive tests]
```
**Output**: Test files

### 6. OPERATE ‚Üí Deployment
```bash
@forge-operate
[Copilot sets up CI/CD and monitoring]
```
**Output**: Deployment configs

## Learn More

- [SDD Methodology](https://github.com/4youtest-vsalmeida/forge-sdd-toolkit#readme)
- [Forge Platform Docs](https://developer.atlassian.com/platform/forge/)
- [GitHub Copilot](https://github.com/features/copilot)

---

**Built with ‚ù§Ô∏è using SDD**
"""
        
        with open(project_path / "README.md", 'w') as f:
            f.write(readme_content)
        
        # .gitignore
        gitignore_content = """# SDD temporary files
*.draft.md
*.tmp.md
*.wip.md

# Node modules
node_modules/

# Forge
.forge/
.tunnel/
build/
dist/

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/*
!.vscode/settings.json
.idea/

# Logs
*.log
npm-debug.log*
"""
        
        with open(project_path / ".gitignore", 'w') as f:
            f.write(gitignore_content)
        
        # .vscode/settings.json
        vscode_settings = """{
  "github.copilot.enable": {
    "*": true,
    "yaml": true,
    "markdown": true
  },
  "files.associations": {
    "*.prompt.md": "markdown"
  }
}
"""
        
        with open(project_path / ".vscode" / "settings.json", 'w') as f:
            f.write(vscode_settings)
        
        print_step_done()
        
        # Success!
        print(f"\n‚úÖ Project '{project_name}' initialized successfully!\n")
        print("üìã Next Steps:\n")
        print(f"  1. cd {project_name}")
        print("  2. code .")
        print("  3. Open GitHub Copilot Chat")
        print("  4. Type: @forge-ideate")
        print("  5. Describe your app idea\n")
        
    except Exception as e:
        print_error(f"Failed to initialize project: {str(e)}")
        # Cleanup on error
        if project_path.exists():
            shutil.rmtree(project_path)
        sys.exit(1)


def main():
    """Main CLI entry point"""
    if len(sys.argv) < 2:
        print("Usage: forge-sdd init <project-name>")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "init":
        if len(sys.argv) < 3:
            print_error("Project name required")
            print("Usage: forge-sdd init <project-name>")
            sys.exit(1)
        
        project_name = sys.argv[2]
        init_project(project_name)
    
    else:
        print_error(f"Unknown command: {command}")
        print("Available commands:")
        print("  init <project-name>  - Initialize a new SDD project")
        sys.exit(1)


if __name__ == "__main__":
    main()
