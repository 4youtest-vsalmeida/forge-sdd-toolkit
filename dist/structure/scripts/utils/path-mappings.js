/**
 * Path Mapping Utilities
 *
 * Transforms relative paths in toolkit prompts to match user project structure.
 *
 * Toolkit structure:
 *   structure/prompts/commands/forge-architect.md
 *   structure/prompts/base/system-prompt.md
 *   structure/templates/general/ADD-template.md
 *
 * User project structure:
 *   .github/prompts/forge-architect.prompt.md
 *   .github/prompts/_base/system-prompt.md
 *   .forge-sdd/templates/general/ADD-template.md
 */
/**
 * Path mappings from toolkit to user project
 */
export const PATH_MAPPINGS = [
    // Base prompts references
    {
        pattern: /\.\.\/(base)\/([^)]+)/g,
        replacement: '_base/$2',
        description: 'Base prompts: ../base/ → _base/'
    },
    {
        pattern: /\.\.\/(\.\.\/prompts\/base)\/([^)]+)/g,
        replacement: '_base/$2',
        description: 'Base prompts from commands: ../../prompts/base/ → _base/'
    },
    // Templates references
    {
        pattern: /\.\.\/(\.\.\/templates)\/([^)]+)/g,
        replacement: '../.forge-sdd/templates/$2',
        description: 'Templates: ../../templates/ → ../.forge-sdd/templates/'
    },
    {
        pattern: /\.\.\/(templates)\/([^)]+)/g,
        replacement: '../.forge-sdd/templates/$2',
        description: 'Templates from base: ../templates/ → ../.forge-sdd/templates/'
    },
    // Schemas references
    {
        pattern: /\.\.\/(\.\.\/schemas)\/([^)]+)/g,
        replacement: '../.forge-sdd/schemas/$2',
        description: 'Schemas: ../../schemas/ → ../.forge-sdd/schemas/'
    },
    {
        pattern: /\.\.\/(schemas)\/([^)]+)/g,
        replacement: '../.forge-sdd/schemas/$2',
        description: 'Schemas from base: ../schemas/ → ../.forge-sdd/schemas/'
    },
    // Docs references (for future use)
    {
        pattern: /\.\.\/(\.\.\/docs)\/([^)]+)/g,
        replacement: '../docs/$2',
        description: 'Docs: ../../docs/ → ../docs/'
    }
];
/**
 * Transform paths in content from toolkit structure to user project structure
 *
 * @param content - File content with toolkit-relative paths
 * @returns Content with user-project-relative paths
 */
export function transformPaths(content) {
    let result = content;
    for (const mapping of PATH_MAPPINGS) {
        result = result.replace(mapping.pattern, mapping.replacement);
    }
    return result;
}
/**
 * Add generation header to transformed file
 *
 * @param content - Transformed content
 * @param sourcePath - Original file path in toolkit
 * @returns Content with header prepended
 */
export function addGenerationHeader(content, sourcePath) {
    const timestamp = new Date().toISOString();
    const header = `<!--
🤖 AUTO-GENERATED by forge-sdd-toolkit
📄 Source: ${sourcePath}
📅 Generated: ${timestamp}

⚠️  DO NOT EDIT THIS FILE MANUALLY
💡 To update: Run \`forge-sdd update\`

This file is part of the SDD (Specification-Driven Development) lifecycle.
Learn more: https://github.com/4youtest-vsalmeida/forge-sdd-toolkit
-->

`;
    return header + content;
}
/**
 * Validate that all paths were transformed correctly
 *
 * @param content - Transformed content
 * @throws Error if any toolkit-relative paths remain
 */
export function validateTransformation(content) {
    // Patterns that should NOT exist after transformation
    const invalidPatterns = [
        { pattern: /\.\.\/(base)\//g, description: '../base/' },
        { pattern: /\.\.\/(templates)\//g, description: '../templates/' },
        { pattern: /\.\.\/(schemas)\//g, description: '../schemas/' },
        { pattern: /\.\.\/(\.\.\/prompts)\//g, description: '../../prompts/' }
    ];
    for (const { pattern, description } of invalidPatterns) {
        if (pattern.test(content)) {
            throw new Error(`Invalid path reference found after transformation: ${description}`);
        }
    }
}
/**
 * Get path mapping statistics for logging
 *
 * @param content - Original content
 * @returns Object with transformation counts
 */
export function getTransformationStats(content) {
    const stats = {};
    for (const mapping of PATH_MAPPINGS) {
        const matches = content.match(mapping.pattern);
        stats[mapping.description] = matches ? matches.length : 0;
    }
    return stats;
}
//# sourceMappingURL=path-mappings.js.map